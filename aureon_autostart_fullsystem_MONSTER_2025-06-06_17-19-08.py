# -*- coding: utf-8 -*-
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AUREON ‚Äê Vollst√§ndiger Autostart‚ÄëLauncher (MONSTER Edition)
Dateiname : aureon_autostart_fullsystem_MONSTER_2025-06-06_17-19-08.py
Pfad      : C:/Users/denni/OneDrive/Dokumente/APP-Echtzeit/
Version   : 2025‚Äë06‚Äë22 (Root‚Äëoptimiert)

Beschreibung
============
‚Ä¢ Pr√ºft/legt Missions‚Äë, Log‚Äë und Response‚ÄëOrdner an
‚Ä¢ Installiert fehlende Python‚ÄëAbh√§ngigkeiten (falls n√∂tig)
‚Ä¢ Erstellt Dummy‚ÄëMissionsskripte, wenn keine vorhanden
‚Ä¢ Startet erkannte Missionsskripte im Hintergrund
‚Ä¢ L√§dt die Cosmic‚ÄëGUI

Hinweis
=======
Die automatische Installation verwendet **kein** `--user`, sodass der Code
innerhalb von Virtual‚ÄëEnvironments ebenso funktioniert wie systemweit.
"""

import importlib
import os
import platform
import subprocess
import sys
from datetime import datetime
from pathlib import Path

# === BASISKONFIGURATION ======================================================
HOME = Path.home()
APP_ROOT      = HOME / "OneDrive" / "Dokumente" / "APP-Echtzeit"
MISSIONS_DIR  = APP_ROOT / "missions"
LOG_DIR       = APP_ROOT / "logs"
RESP_DIR      = APP_ROOT / "responses"
GUI_FILE      = APP_ROOT / "gui" / "aureon_gui_missions_cosmic.py"
LOG_FILE      = LOG_DIR / f"log_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.txt"

# === HILFSFUNKTIONEN =========================================================

def log(message: str) -> None:
    """Schreibt eine Zeitmarke in die Logdatei und gibt sie auf stdout aus."""
    LOG_DIR.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.now().strftime("[%H:%M:%S]")
    with LOG_FILE.open("a", encoding="utf-8") as f:
        f.write(f"{timestamp} {message}\n")
    print(message)


def ensure_dirs() -> None:
    """Erzeugt ben√∂tigte Verzeichnisse, falls sie fehlen."""
    for path in (MISSIONS_DIR, LOG_DIR, RESP_DIR):
        path.mkdir(parents=True, exist_ok=True)
        log(f"üìÅ Ordner gepr√ºft: {path}")


def install_dependencies() -> None:
    """Installiert fehlende Abh√§ngigkeiten ohne --user‚ÄëFlag."""
    pkgs = [
        "pyttsx3",
        "SpeechRecognition",
        "requests",
        "beautifulsoup4",
        "watchdog",
    ]
    for pkg in pkgs:
        try:
            importlib.import_module(pkg.split("==")[0].lower())
            log(f"‚úÖ Modul bereits vorhanden: {pkg}")
        except ImportError:
            log(f"‚¨áÔ∏è  Installiere fehlendes Modul: {pkg}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])
            log(f"‚úÖ Modul installiert: {pkg}")


def create_dummy_missions() -> None:
    """Erstellt Beispiel‚ÄëMissionsskripte, falls Missionsordner leer ist."""
    dummy_code = {
        "sektion1.py": 'print("üåê Sektion¬†1 aktiviert: Netzwerk√ºberpr√ºfung ‚Ä¶")',
        "sektion2.py": 'print("üõ∞Ô∏è  Sektion¬†2 aktiviert: Internetverbindung ‚Ä¶")',
        "sektion3.py": 'print("üîê Sektion¬†3 aktiviert: Sicherheitseinstellungen ‚Ä¶")',
    }
    if any(MISSIONS_DIR.iterdir()):
        log("üìÑ Missionsskripte bereits vorhanden ‚Äì Dummy‚ÄëErstellung √ºbersprungen.")
        return
    for filename, code in dummy_code.items():
        filepath = MISSIONS_DIR / filename
        filepath.write_text(code, encoding="utf-8")
        log(f"‚öôÔ∏è  Dummy‚ÄëSkript erstellt: {filename}")


def run_missions() -> None:
    """Startet jedes Missionsskript als separaten Prozess."""
    missions = sorted(MISSIONS_DIR.glob("*.py"))
    log("üîç Spiegelmodus aktiviert ‚Äì erkannte Missionen: " + ", ".join(m.name for m in missions))
    for mission in missions:
        log(f"‚ú® Starte Mission: {mission.name}")
        subprocess.Popen([sys.executable, str(mission)], shell=False)


def start_gui() -> None:
    """Startet die Cosmic‚ÄëGUI, falls vorhanden."""
    if not GUI_FILE.exists():
        log("‚ùå GUI‚ÄëDatei nicht gefunden: " + str(GUI_FILE))
        return
    subprocess.Popen([sys.executable, str(GUI_FILE)], shell=False)
    log("üöÄ GUI gestartet: AUREON Cosmic Missions")


# === HAUPTPLAN ==============================================================

def main() -> None:
    log("üß† AUREON AUTOSTART BEGINNT‚Ä¶")
    ensure_dirs()
    install_dependencies()
    create_dummy_missions()
    run_missions()
    start_gui()
    log("‚úÖ AUTOSTART‚ÄëVORGANG ABGESCHLOSSEN.")


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        log(f"‚ùå Fehler: {exc}")
